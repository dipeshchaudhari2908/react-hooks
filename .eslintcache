[{"/home/dipesh/Desktop/React/react-hooks/src/index.js":"1","/home/dipesh/Desktop/React/react-hooks/src/App.js":"2","/home/dipesh/Desktop/React/react-hooks/src/reportWebVitals.js":"3","/home/dipesh/Desktop/React/react-hooks/src/components/State.js":"4","/home/dipesh/Desktop/React/react-hooks/src/components/Effect.js":"5","/home/dipesh/Desktop/React/react-hooks/src/components/Useeffect.js":"6"},{"size":500,"mtime":1612182011083,"results":"7","hashOfConfig":"8"},{"size":753,"mtime":1612258090482,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1612182011083,"results":"10","hashOfConfig":"8"},{"size":951,"mtime":1612184338472,"results":"11","hashOfConfig":"8"},{"size":861,"mtime":1612257468301,"results":"12","hashOfConfig":"8"},{"size":535,"mtime":1612259020637,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"9xaire",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dipesh/Desktop/React/react-hooks/src/index.js",[],["28","29"],"/home/dipesh/Desktop/React/react-hooks/src/App.js",[],"/home/dipesh/Desktop/React/react-hooks/src/reportWebVitals.js",[],"/home/dipesh/Desktop/React/react-hooks/src/components/State.js",[],"/home/dipesh/Desktop/React/react-hooks/src/components/Effect.js",["30"],"import React,{useCallback,useState} from 'react';\n\nconst Effect = () => {\n\n    const [numbers,setNumber] = useState({num1: 0, num2: 0});\n    const [result,setResult] = useState(0);\n       const memoizedCallback = useCallback(()=>{\n        setResult(parseInt(numbers.num1) + parseInt(numbers.num2));\n        \n    },[numbers,result]);\n    console.log(result);\n    return (\n        <div>\n           <u><h1>useCallback Page</h1></u> \n           <h2>Result:{result}</h2>\n           <br/>\n           <input type=\"text\" onChange={(e) => setNumber({num1: +e.target.value, num2: numbers.num2})\n        }\n        />\n        <br/>\n           <input type=\"text\" onChange={(e) => setNumber({num1: numbers.num1, num2: +e.target.value })\n        }\n        />\n\n        <br/>\n        <button onClick={memoizedCallback}>Cal</button>\n        </div>\n    )\n}\n\nexport default Effect\n","/home/dipesh/Desktop/React/react-hooks/src/components/Useeffect.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":10,"column":7,"nodeType":"37","endLine":10,"endColumn":23,"suggestions":"38"},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'result'. Either exclude it or remove the dependency array.","ArrayExpression",["41"],"no-global-assign","no-unsafe-negation",{"desc":"42","fix":"43"},"Update the dependencies array to be: [numbers]",{"range":"44","text":"45"},[314,330],"[numbers]"]